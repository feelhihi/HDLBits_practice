// alwaysblock1 
module top_module(
    input a, 
    input b,
    output wire out_assign,
    output reg out_alwaysblock
);

    assign out_assign = a&b;
    always@(*) out_alwaysblock = a&b;

endmodule

// alwaysblock2
module top_module(
    input clk,
    input a,
    input b,
    output wire out_assign,
    output reg out_always_comb,
    output reg out_always_ff   );

    // 組合邏輯
    assign out_assign = a^b; //blocking 逐行執行
    always@(*) out_always_comb = a^b; //blocking 逐行執行
    // 時序邏輯
    always@(posedge clk) out_always_ff <= a^b; //non-blocking 同步執行

endmodule

//always_if
module top_module(
    input a,
    input b,
    input sel_b1,
    input sel_b2,
    output wire out_assign,
    output reg out_always   ); 

    assign out_assign = (sel_b1&sel_b2) ? b:a;
    always @(*) begin
        if (sel_b1&sel_b2) begin
            out_always = b;
        end
        else begin
            out_always = a;
        end
    end
endmodule

//Always if2
module top_module (
    input      cpu_overheated,
    output reg shut_off_computer,
    input      arrived,
    input      gas_tank_empty,
    output reg keep_driving  ); //

    always @(*) begin
        if (cpu_overheated)
           shut_off_computer = 1;
        else
           shut_off_computer = 0; //must default
    end

    always @(*) begin
        if (~arrived)
           keep_driving = ~gas_tank_empty;
        else
           keep_driving = 0; //must default
    end

endmodule

//Always case
module top_module ( 
    input [2:0] sel, 
    input [3:0] data0,
    input [3:0] data1,
    input [3:0] data2,
    input [3:0] data3,
    input [3:0] data4,
    input [3:0] data5,
    output reg [3:0] out   );//

    always@(*) begin  // This is a combinational circuit
        case(sel)
            3'b000: begin 
                out = data0;
            end
            3'b001: begin 
                out = data1;
            end
            3'b010: begin 
                out = data2;
            end
            3'b011: begin 
                out = data3;
            end
            3'b100: begin 
                out = data4;
            end
            3'b101: begin 
                out = data5;
            end
            default: begin
                out = 0;
            end
        endcase
    end

endmodule

//priority encoder
module top_module (
    input [3:0] in,
    output reg [1:0] pos  );

    always @(*) begin
        case(in)
            4'b0000: pos = 2'b00;
            
            4'b0001: pos = 2'b00;
            4'b0011: pos = 2'b00;
            4'b0101: pos = 2'b00;
            4'b0111: pos = 2'b00;
            4'b1001: pos = 2'b00;
            4'b1011: pos = 2'b00;
            4'b1101: pos = 2'b00;
            4'b1111: pos = 2'b00;

            4'b0010: pos = 2'b01;
            4'b0110: pos = 2'b01;
            4'b1110: pos = 2'b01;
            4'b1010: pos = 2'b01;

            4'b0100: pos = 2'b10;
            4'b1100: pos = 2'b10;

            4'b1000: pos = 2'b11;

            default: pos = 2'b00;
        endcase
    end
endmodule
//Priority encoder with casez
module top_module (
    input [7:0] in,
    output reg [2:0] pos );

    always @(*) begin
        casez (in[7:0])
            8'bzzzzzzz1: pos = 0;
            8'bzzzzzz1z: pos = 1;
            8'bzzzzz1zz: pos = 2;
            8'bzzzz1zzz: pos = 3;
            8'bzzz1zzzz: pos = 4;
            8'bzz1zzzzz: pos = 5;
            8'bz1zzzzzz: pos = 6;
            8'b1zzzzzzz: pos = 7;
            default: pos = 0;
        endcase
    end
endmodule

//Avoiding latches
// synthesis verilog_input_version verilog_2001
module top_module (
    input [15:0] scancode,
    output reg left,
    output reg down,
    output reg right,
    output reg up  ); 

    always @(*) begin
        up = 1'b0; down = 1'b0; left = 1'b0; right = 1'b0; //default here
        case (scancode)
            16'he06b: left = 1'b1;
            16'he072: down = 1'b1;
            16'he074: right = 1'b1;
            16'he075: up = 1'b1;
            //default;
        endcase
    end
endmodule

//Four-bit binary counter
module top_module (
    input clk,
    input reset,      // Synchronous active-high reset
    output [3:0] q);

    always @(posedge clk) begin
        q <= (reset) ? 4'b0: q+1'b1;
    end

endmodule

//Decade counter
module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);

    always @(posedge clk) begin
        q <= (reset||(q==9)) ? 4'b0: q+1;
    end
endmodule

//Decade counter again
module top_module (
    input clk,
    input reset,
    output [3:0] q);

    always @(posedge clk) begin
        q <= (reset || q==10) ? 1:q+1;
    end

endmodule

//Slow decade counter
module top_module (
    input clk,
    input slowena,
    input reset,
    output [3:0] q);

    always @(posedge clk) begin
        if (reset)
            q <= 0;
        else if (slowena && q==9)
            q <= 0;
        else if (slowena && q!=9)
            q <= q + 1;
        else
            q = q;
    end

endmodule

//Counter 1â€“12
module top_module (
    input clk,
    input reset,
    input enable,
    output [3:0] Q,
    output c_enable,
    output c_load,
    output [3:0] c_d
); //

    assign c_enable = enable;
    assign c_load = reset | (Q==12 && enable==1);
    assign c_d = 1;
    count4 the_counter (clk, c_enable, c_load, c_d, Q);
    
endmodule

//Counter 1000
module top_module (
    input clk,
    input reset,
    output OneHertz,
    output [2:0] c_enable
); //
    wire [3:0] w1, w10, w100;
	assign c_enable = {
        w1==9 && w10==9,
        w1==9,
        1'b1
    };//when to add bcd count
    assign OneHertz = w1==9 && w10==9 && w100==9;//999 reach
    bcdcount counter0 (clk, reset, c_enable[0],w1);
    bcdcount counter1 (clk, reset, c_enable[1],w10);
    bcdcount counter2 (clk, reset, c_enable[2],w100);

endmodule

//4-digit decimal counter
reg [3:0] w1, w10, w100, w1000; //weight
    always @(posedge clk) begin
        if (reset | w1==9)
            w1 <= 0;
        else
            w1 <= w1 + 1;
    end
    always @(posedge clk) begin
        if (reset | (w1==9&&w10==9) )
            w10 <= 0;
        else if (w1==9)
            w10 <= w10 + 1;
    end
    always @(posedge clk) begin
        if (reset | (w1==9&&w10==9&&w100==9) )
            w100 <= 0;
        else if (w1==9&&w10==9)
            w100 <= w100 + 1;
    end
    always @(posedge clk) begin
        if (reset | (w1==9&&w10==9&&w100==9&&w1000==9) )
            w1000 <= 0;
        else if (w1==9&&w10==9&&w100==9)
            w1000 <= w1000 + 1;
    end
    
    assign q = {w1000, w100, w10, w1};
    assign ena[1] = (w1==9)? 1:0;
    assign ena[2] = (w1==9&&w10==9)? 1:0;
    assign ena[3] = (w1==9&&w10==9&&w100==9)? 1:0;

//12-hour clock
module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss); 

    reg [3:0] hh10, hh1, mm10, mm1, ss10, ss1;
    wire hour_change, hour_reset, pm_change;
    // ss
    always @(posedge clk) begin
        if (reset | (ena&&ss1==9))
            ss1 <= 0;
        else if (ena)
            ss1 <= ss1 + 1;
    end
    always @(posedge clk) begin
        if (reset | (ena&&ss1==9&&ss10==5))
            ss10 <= 0;
        else if (ena && ss1==9)
            ss10 <= ss10 + 1;
    end
    // mm
    always @(posedge clk) begin
        if (reset | (ena&&ss1==9&&ss10==5&&mm1==9))
            mm1 <= 0;
        else if (ena && ss1==9 && ss10==5)
            mm1 <= mm1 + 1;
    end
    always @(posedge clk) begin
        if (reset | (ena&&ss1==9&&ss10==5&&mm1==9&&mm10==5))
            mm10 <= 0;
        else if (ena && ss1==9 && ss10==5 && mm1==9)
            mm10 <= mm10 + 1;
    end
    // hh
    assign hour_change = (ss1==9&&ss10==5&&mm1==9&&mm10==5&& hh1==9 && hh10==0);
    assign hour_reset = (ss1==9&&ss10==5&&mm1==9&&mm10==5&& hh1==2 && hh10==1);
    always @(posedge clk) begin
        if (reset)
            hh1 <= 2; //12
        else if (ena && hour_change)
            hh1 <= 0; //09~10
        else if (ena && hour_reset)
            hh1 <= 1; //12~01
        else if (ena && ss1==9 && ss10==5 && mm1==9 && mm10==5)
            hh1 <= hh1 + 1;
    end
    always @(posedge clk) begin
        if (reset)
            hh10 <= 1; //12
        else if (ena && hour_reset)
            hh10 <= 0; //12~01
        else if (ena && ss1==9 && ss10==5 && mm1==9 && mm10==5 && hh1==9)
            hh10 <= hh10 + 1;
    end
    // am.pm
    always @(posedge clk) begin
        if (reset)
            pm_change <= 0;
        else if (ena && ss1==9 && ss10==5 && mm1==9 && mm10==5 && hh1==1 && hh10==1)
            pm_change <= ~pm_change; //11:59:59
    end
    
    // assign
    assign hh = {hh10,hh1};
    assign mm = {mm10,mm1};
    assign ss = {ss10,ss1};
    assign pm = pm_change;

endmodule

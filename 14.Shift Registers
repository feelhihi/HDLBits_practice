//4-bit shift register
module top_module(
    input clk,
    input areset,  // async active-high reset to zero
    input load,
    input ena,
    input [3:0] data,
    output reg [3:0] q); 

    always @(posedge clk, posedge areset) begin
        if (areset)
            q <= 0;
        else if (load)
            q <= data;
        else if (ena)
            q <= {1'b0, q[3:1]}; //q <= (q>>1);
        else
            q <= q;
    end

endmodule

// Left/right rotator
module top_module(
    input clk,
    input load,
    input [1:0] ena,
    input [99:0] data,
    output reg [99:0] q); 

    always @(posedge clk) begin
        if (load)
            q <= data;
        else
            begin
                case (ena)
                    2'b00: q <= q;
                    2'b01: q <={q[0],q[99:1]};
                    2'b10: q <={q[98:0],q[99]};
                    2'b11: q <= q;
                endcase
            end
    end

endmodule

//Left/right arithmetic shift by 1 or 8
module top_module(
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [63:0] q); 

    always @(posedge clk) begin
        if (load)
            q <= data;
        else if (ena)
            begin
                case (amount)
                    2'b00: q <={q[62:0],1'b0};
                    2'b01: q <={q[55:0],8'd0};
                    2'b10: q <={q[63],q[63:1]};
                    2'b11: q <={ {8{q[63]}} ,q[63:8]};
                endcase
            end
    end

endmodule

//5-bit LFSR
module top_module(
    input clk,
    input reset,    // Active-high synchronous reset to 5'h1
    output [4:0] q
); 

    always @(posedge clk) begin
        if (reset)
            q <= 5'd1;
        else
            begin
                q[4] <= q[0]; //q[0]^0 = q[0]
                q[3] <= q[4];
                q[2] <= q[3]^q[0];
                q[1] <= q[2];
                q[0] <= q[1];
            end
    end

endmodule

//3-bit LFSR
module top_module (
 input [2:0] SW,      // R
 input [1:0] KEY,     // L and clk
 output [2:0] LEDR);  // Q

    always @(posedge KEY[0]) begin //clk
        if (KEY[1]) //L
            LEDR <= SW;
        else
            begin
                LEDR[2] <= LEDR[2]^LEDR[1];
                LEDR[1] <= LEDR[0];
                LEDR[0] <= LEDR[2];
            end
    end

endmodule

//Shift register
module top_module (
    input clk,
    input resetn,   // synchronous reset
    input in,
    output out);

    reg [3:0] temp;
    always @(posedge clk) begin
        temp <= (resetn) ? {temp[2:0], in}:4'd0;
    end
    
    assign out = temp[3];

endmodule

//Shift register - MUXDFF 
module top_module (
    input [3:0] SW,
    input [3:0] KEY,
    output [3:0] LEDR
); //

    MUXDFF mux3 (KEY[0], KEY[2], KEY[1], SW[3], KEY[3], LEDR[3]);
    MUXDFF mux2 (KEY[0], KEY[2], KEY[1], SW[2], LEDR[3], LEDR[2]);
    MUXDFF mux1 (KEY[0], KEY[2], KEY[1], SW[1], LEDR[2], LEDR[1]);
    MUXDFF mux0 (KEY[0], KEY[2], KEY[1], SW[0], LEDR[1], LEDR[0]);

endmodule



module MUXDFF (
    input clk,L,E,R,w,
    output Q
);

    always @(posedge clk) begin
        if (L)
            Q <= R;
        else
            Q <= (E)? w:Q;
    end

endmodule

//3-input LUT
module top_module (
    input clk,
    input enable,
    input S,
    input A, B, C,
    output Z ); 

    reg [7:0] temp;
    always @(posedge clk) begin
        if (enable)
            temp <= {temp[6:0],S};
        else
            temp <= temp;
    end
    
    assign Z = temp[{A,B,C}]; //{A,B,C}即位元位置

endmodule

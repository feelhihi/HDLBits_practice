//D flip-flop
module top_module (
    input clk,    // Clocks are used in sequential circuits
    input d,
    output reg q );//

    // Use a clocked always block
    //   copy d to q at every positive edge of clk
    //   Clocked always blocks should use non-blocking assignments
    always @(posedge clk) begin
        q <= d;
    end

endmodule

//D flip-flop s
module top_module (
    input clk,
    input [7:0] d,
    output [7:0] q
);

    always @(posedge clk) begin
        q <= d;
    end

endmodule

//DFF with reset
module top_module (
    input clk,
    input reset,            // Synchronous reset
    input [7:0] d,
    output [7:0] q
);

    always @(posedge clk) begin
        if (reset)
            q = 8'b0;
        else
            q <= d;
    end

endmodule

//DFF with reset value
module top_module (
    input clk,
    input reset,
    input [7:0] d,
    output [7:0] q
);

    always @(negedge clk) begin
        if (reset)
            q = 8'h34;
        else
            q <= d;
    end

endmodule

//DFF with asynchronous reset
module top_module (
    input clk,
    input areset,   // active high asynchronous reset
    input [7:0] d,
    output [7:0] q
);

    always @(posedge clk or posedge areset) begin
        if (areset)
            q = 8'b0;
        else
            q <= d;
    end

endmodule

//DFF with byte enable
module top_module (
    input clk,
    input resetn,
    input [1:0] byteena,
    input [15:0] d,
    output [15:0] q
);

    always @(posedge clk) begin
        if (resetn) begin
            q[7:0] <= (byteena[0]) ? d[7:0]:q[7:0];
            q[15:8] <= (byteena[1]) ? d[15:8]:q[15:8];
        end
        else
            q <= 8'b0;
    end

endmodule

//D Latch
module top_module (
    input d, 
    input ena,
    output q);

    assign q = (ena) ? d:q;

endmodule

//DFF asyn reset
module top_module (
    input clk,
    input d, 
    input ar,   // asynchronous reset
    output q);

    always @(posedge clk or posedge ar) begin
        q <= (ar) ? 1'b0:d;
    end

endmodule

//DFF syn reset
module top_module (
    input clk,
    input d, 
    input r,   // synchronous reset
    output q);

    always @(posedge clk) begin
        q <= (r) ? 1'b0:d;
    end

endmodule

//DFF+gate = T F/F
module top_module (
    input clk,
    input in, 
    output out);

    always @(posedge clk) begin
        out <= in^out; //out 為 reg
    end

endmodule

//Mux and DFF
module top_module (
 input clk,
 input L,
 input r_in,
 input q_in,
 output reg Q);

    always @(posedge clk) begin
        Q <= (L) ? r_in:q_in; //參照下一題, Q繞回決定輸入
    end

endmodule

//Mux and DFF shift register
module top_module (
    input clk,
    input w, R, E, L,
    output Q
);
    always @(posedge clk) begin
        if (L)
            Q <= R;
        else
            Q <= (E) ? w:Q;
    end
endmodule

//DFFs and gates
module top_module (
    input clk,
    input x,
    output z
); 

    wire [2:0] Q;
    always @(posedge clk) begin
        Q[0] <= Q[0] ^ x;
        Q[1] <= ~Q[1] & x;
        Q[2] <= ~Q[2] | x;
    end
    assign z = ~{|Q};

endmodule

//Create circuit from truth table
module top_module (
    input clk,
    input j,
    input k,
    output Q); 

    always @(posedge clk) begin
        case ({j,k})
            2'b00: Q <= Q;
            2'b01: Q <= 1'b0;
            2'b10: Q <= 1'b1;
            2'b11: Q <= ~Q;
        endcase
    end

endmodule

//Detect an edge
module top_module (
    input clk,
    input [7:0] in,
    output [7:0] pedge
);

    reg [7:0] temp;
    always @ (posedge clk) begin
        temp <= in; //temp 跟 in 差一個clk
        pedge <= in & ~temp; //in為1 temp為0
    end

endmodule

//Detect both edges
module top_module (
    input clk,
    input [7:0] in,
    output [7:0] anyedge
);

    reg [7:0] temp;
    always @ (posedge clk) begin
        temp <= in; //temp 跟 in 差一個clk
        anyedge <= in ^ temp; //in為1 temp為0 或 in為0 temp為1
    end

endmodule

//Edge capture register
module top_module (
    input clk,
    input reset,
    input [31:0] in,
    output [31:0] out
);

    reg [31:0] temp;
    always @(posedge clk) begin
        temp <= in;
        out <= (reset) ? 32'd0:((~in&temp)|out); //保存in下降沿的變化: 檢測下降沿並將輸出1,其餘保持不變
    end

endmodule

//Dual-edge triggered flip-flop
module top_module (
    input clk,
    input d,
    output q
);

    reg q_temp1, q_temp2;
    always @(posedge clk) begin
        q_temp1 <= d ^ q_temp2; // q=t1^t2=d^t2^t2=d^0=d
    end
    
    always @(negedge clk) begin
        q_temp2 <= d ^ q_temp1; // q=t1^t2=t1^d^t1=d^0=d
    end
    
    assign q = q_temp1 ^ q_temp2;

endmodule

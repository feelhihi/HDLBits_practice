//One-hot FSM
module top_module(
    input in,
    input [9:0] state,
    output [9:0] next_state,
    output out1,
    output out2);

    parameter S0=4'd0, S1=4'd1, S2=4'd2, S3=4'd3, S4=4'd4, S5=4'd5, S6=4'd6, S7=4'd7, S8=4'd8, S9=4'd9;
    
    //next state
    assign next_state[S0] = ~in&(state[S0]|state[S1]|state[S2]|state[S3]|state[S4]|state[S7]|state[S8]|state[S9]);
    assign next_state[S1] = (in&state[S0])|(in&state[S8])|(in&state[S9]);
    assign next_state[S2] = in&state[S1];
    assign next_state[S3] = in&state[S2];
    assign next_state[S4] = in&state[S3];
    assign next_state[S5] = in&state[S4];
    assign next_state[S6] = in&state[S5];
    assign next_state[S7] = (in&state[S6])|(in&state[S7]);
    assign next_state[S8] = ~in&state[S5];
    assign next_state[S9] = ~in&state[S6];
    
    //output
    assign out1 = state[S8]|state[S9];
    assign out2 = state[S7]|state[S9];
endmodule

//PS/2 packet parser
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output done); //

    parameter S0=2'b00, S1=2'b01, S2=2'b10, S3=2'b11;
    reg [2:0] state, next_state;

    // State transition logic (combinational)
    always @(*) begin
        case (state)
            S0: next_state = in[3] ? S1:S0;
            S1: next_state = S2;
            S2: next_state = S3;
            S3: next_state = in[3] ? S1:S0;
            default: next_state = S0;
        endcase
    end
    
    // State flip-flops (sequential)
    always @(posedge clk) begin
        state <= (reset) ? S0:next_state ;
    end
    
    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            done <= 0;
        end
        else begin
            case (next_state)
                S0: done<=0;
                S1: done<=0;
                S2: done<=0;
                S3: done<=1;
                default: done<=0;
            endcase
        end
    end
    
endmodule

//PS/2 packet parser and datapath
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); //

    // FSM from fsm_ps2
    parameter S0=2'b00, S1=2'b01, S2=2'b10, S3=2'b11;
    reg [2:0] state, next_state;

    // State transition logic (combinational)
    always @(*) begin
        case (state)
            S0: next_state = in[3] ? S1:S0;
            S1: next_state = S2;
            S2: next_state = S3;
            S3: next_state = in[3] ? S1:S0;
            default: next_state = S0;
        endcase
    end
    
    // State flip-flops (sequential)
    always @(posedge clk) begin
        state <= (reset) ? S0:next_state ;
    end
    
    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            done <= 0;
        end
        else begin
            case (next_state)
                S0: done<=0;
                S1: done<=0;
                S2: done<=0;
                S3: done<=1;
                default: done<=0;
            endcase
            out_bytes<={out_bytes[15:0],in[7:0]};
        end
    end
    
    // New: Datapath to store incoming bytes.

endmodule

//Serial receiver
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output done
); 

    parameter S0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100;
    reg [2:0] state, next_state;
    reg [3:0] cnt;

    // State transition logic (combinational)
    always @(*) begin
        case (state)
            S0: next_state = in ? S0:S1; //idle or start
            S1: next_state = S2; //data
            S2: next_state = (cnt==8) ? (in?S3:S4):S2; //cnt==8->S3orS4
            S3: next_state = in ? S0:S1; //idle or start
            S4: next_state = in ? S0:S4; //idle or keep
            default: next_state = S0;
        endcase
    end
    
    // State flip-flops (sequential)
    always @(posedge clk) begin
        state <= (reset) ? S0:next_state ;
    end
    
    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            done <= 0;
        end
        else begin
            case (next_state)
                S3: done<=1;
                default: done<=0;
            endcase
        end
    end
    
    always @(posedge clk) begin
        if (reset) begin
            cnt <= 0;
        end
        else begin
            case (next_state)
                S1: cnt<=0;
                S2: cnt<=cnt+1;
                default: cnt<=cnt;
            endcase
        end
    end
    
endmodule

//Serial receiver and datapath
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //

    // Use FSM from Fsm_serial
    parameter S0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100;
    reg [2:0] state, next_state;
    reg [3:0] cnt;
    reg [7:0] data;

    // State transition logic (combinational)
    always @(*) begin
        case (state)
            S0: next_state = in ? S0:S1; //idle or start
            S1: next_state = S2; //data
            S2: next_state = (cnt==8) ? (in?S3:S4):S2; //cnt==8->S3orS4
            S3: next_state = in ? S0:S1; //idle or start
            S4: next_state = in ? S0:S4; //idle or keep
            default: next_state = S0;
        endcase
    end
    
    // State flip-flops (sequential)
    always @(posedge clk) begin
        state <= (reset) ? S0:next_state ;
    end
    
    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            done <= 0;
        end
        else begin
            case (next_state)
                S3: done<=1;
                default: done<=0;
            endcase
        end
    end
    
    always @(posedge clk) begin
        if (reset) begin
            cnt <= 0;
        end
        else begin
            case (next_state)
                S1: cnt<=0;
                S2: cnt<=cnt+1;
                default: cnt<=cnt;
            endcase
        end
    end
    
    always @(posedge clk) begin
        if (reset) begin
            data <= 0;
        end
        else begin
            case (next_state)
                S1: data<=0;
                S2: data<={in,data[7:1]};
                default: data<=data;
            endcase
        end
    end
    
    always @(posedge clk) begin
        if (reset) begin
            out_byte <= 0;
        end
        else begin
            case (next_state)
                S3: out_byte <= data;
                default: out_byte <= 0;
            endcase
        end
    end
    //assign out_byte = data;
    
    // New: Datapath to latch input bits.

endmodule

//Serial receiver with parity checking
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
); //

    // Use FSM from Fsm_serial
    parameter S0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100, S5=3'b101;
    reg [2:0] state, next_state;
    reg [3:0] cnt;
    reg [7:0] data;
    wire odd, rst;
    
    // State transition logic (combinational)
    always @(*) begin
        case (state)
            S0: next_state = in ? S0:S1; //idle or start
            S1: next_state = S2; //data
            S2: next_state = (cnt==8) ? S3:S2; //cnt==8->check
            S3: next_state = in ? S4:S5; //stop or error
            S4: next_state = in ? S0:S1; //idle or start
            S5: next_state = in ? S0:S5; //idle or keep
            default: next_state = S0;
        endcase
    end
    
    // State flip-flops (sequential)
    always @(posedge clk) begin
        state <= (reset) ? S0:next_state ;
    end
    
    // Output logic 
    always @(posedge clk) begin
        if (reset) begin
            cnt <= 0;
        end
        else begin
            case (next_state)
                S1: cnt<=0;
                S2: cnt<=cnt+1;
                default: cnt<=cnt;
            endcase
        end
    end

    always @(posedge clk) begin
        if (reset) begin
            data <= 0;
        end
        else begin
            case (next_state)
                S1: data<=0;
                S2: data<={in,data[7:1]};
                default: data<=data;
            endcase
        end
    end

    assign rst = (reset) | (next_state==S1);
    parity parity_inst(
        .clk(clk),
        .reset(rst),
        .in(in),
        .odd(odd)
    );
    
    always @(posedge clk) begin
        if (reset) begin
            done <= 0;
        end
        else begin
            case (next_state)
                S4: done <= (odd);
                default: done <= 0;
            endcase
        end
    end
    //assign done = (state == S4) && (~odd); //odd reserve
    
    always @(posedge clk) begin
        if (reset) begin
            out_byte <= 0;
        end
        else begin
            case (next_state)
                S4: out_byte <= data;
                default: out_byte <= 0;
            endcase
        end
    end
    //assign out_byte = data;

endmodule

//Sequence recognition
module top_module(
    input clk,
    input reset,    // Synchronous reset
    input in,
    output disc,
    output flag,
    output err);
    
    parameter IDLE=4'd0, ONE=4'd1, TWO=4'd2, THREE=4'd3, FOUR=4'd4, FIVE=4'd5, SIX=4'd6, ERR=4'd7, DISC = 4'd8, FLAG=4'd9;
    reg [3:0] state ,next_state;
    
    // State tranext_stateition logic (combinational)
    always @(*)begin
        case(state)
            IDLE: next_state = in? ONE:IDLE;
            ONE:  next_state = in? TWO:IDLE;
            TWO:  next_state = in? THREE:IDLE;
            THREE:next_state = in? FOUR:IDLE;
            FOUR: next_state = in? FIVE:IDLE;
            FIVE: next_state = in? SIX:DISC;
            SIX:  next_state = in? ERR:FLAG;
            ERR:  next_state = in? ERR:IDLE;
            DISC: next_state = in? ONE:IDLE;
            FLAG: next_state = in? ONE:IDLE;
            default: next_state = IDLE;
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk) begin
        state <= (reset) ? IDLE:next_state ;
    end
    
    // Output logic
    assign disc = (state == DISC);
    assign flag = (state == FLAG);
    assign err  = (state == ERR);

endmodule

//Conditional ternary operator
module top_module (
    input [7:0] a, b, c, d,
    output [7:0] min);//

    // assign intermediate_result1 = compare? true: false;
    wire [7:0] ab,cd;
    assign ab = (a<b) ? a:b;
    assign cd = (c<d) ? c:d;
    assign min = (ab<cd) ? ab:cd;

endmodule

//Reduction operators
module top_module (
    input [7:0] in,
    output parity); 

    assign parity = ^in; //奇偶校驗, XOR all bits

endmodule

//Reduction: Even wider gates
module top_module( 
    input [99:0] in,
    output out_and,
    output out_or,
    output out_xor 
);

    assign out_and = &in;
    assign out_or = |in;
    assign out_xor = ^in;

endmodule

//Combinational for-loop: Vector reversal 2
module top_module( 
    input [99:0] in,
    output [99:0] out
);

    integer i;
    always @(*) begin
        for (i=0;i<=99;i=i+1)
            out[i] = in[99-i]; //not assign
    end

endmodule

//Combinational for-loop: 255-bit population count
module top_module( 
    input [254:0] in,
    output [7:0] out );

    always @(*) begin
        out = 8'b0;
        for (int i=0;i<255;i=i+1)
            out = out + in[i];
    end
endmodule

//Generate for-loop: 100-bit binary adder 2
module top_module( 
    input [99:0] a, b,
    input cin,
    output [99:0] cout,
    output [99:0] sum );


    always @(*) begin
        for (int i=0;i<100;i++) begin
            if (i==0) begin
                {cout[i],sum[i]} = a[i]+b[i]+cin;
            end
            else begin
                {cout[i],sum[i]} = a[i]+b[i]+cout[i-1];
            end
        end
    end

endmodule

//Generate for-loop: 100-digit BCD adder
module top_module( 
    input [399:0] a, b,
    input cin,
    output cout,
    output [399:0] sum );

    wire [99:0] temp;
    generate
        genvar i;
        for (i=0;i<100;i=i+1) begin: adder
            if (i==0) begin
                bcd_fadd inst1(.a(a[3:0]), .b(b[3:0]), .cin(cin), .cout(temp[0]), .sum(sum[3:0]));
            end
            else begin
                bcd_fadd inst2(.a(a[4*i+3:4*i]),
                               .b(b[4*i+3:4*i]),
                               .cin(temp[i-1]),
                               .cout(temp[i]),
                               .sum(sum[4*i+3:4*i]));
            end
        end
        assign cout = temp[99];
    endgenerate

endmodule

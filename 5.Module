//Module
module top_module ( input a, input b, output out );

    mod_a instance2 ( .in1(a), .in2(b), .out(out) );

endmodule

//Module pos
module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);
    mod_a instance1 ( out1, out2, a, b, c, d );
endmodule

//Module name
module top_module ( 
    input a, 
    input b, 
    input c,
    input d,
    output out1,
    output out2
);

    mod_a inst (.in1(a), .in2(b), .in3(c), .in4(d), .out1(out1), .out2(out2));

endmodule

//Module shift
module top_module ( input clk, input d, output q );
    wire d1,d2;
    my_dff inst1(.clk(clk), .d(d), .q(d1));
    my_dff inst2(.clk(clk), .d(d1), .q(d2));
    my_dff inst3(.clk(clk), .d(d2), .q(q));
endmodule

//Module shift8
module top_module ( 
    input clk, 
    input [7:0] d, 
    input [1:0] sel, 
    output [7:0] q 
);
    wire [7:0] d1,d2,d3;
    my_dff8 dff1 ( .clk(clk), .d(d), .q(d1));
    my_dff8 dff2 ( .clk(clk), .d(d1), .q(d2));
    my_dff8 dff3 ( .clk(clk), .d(d2), .q(d3));
    always @(*)
        case (sel)
			2'b00:q=d;
            2'b01:q=d1;
            2'b10:q=d2;
            2'b11:q=d3;
        endcase
endmodule

//Add1
module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);

    wire out0;
    wire [15:0] sum0, sum1;
    add16 inst1(.a(a[15:0]), .b(b[15:0]), .cin(1'b0), .cout(out0), .sum(sum0));
    add16 inst2(.a(a[31:16]), .b(b[31:16]), .cin(out0), .cout(), .sum(sum1));
    
    assign sum = {sum1, sum0};

endmodule

//Module fadd
module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);//

    wire w;
    add16 inst1(.a(a[15:0]), .b(b[15:0]), .cin(1'b0), .cout(w), .sum(sum[15:0]));
    add16 inst2(.a(a[31:16]), .b(b[31:16]), .cin(w), .cout(), .sum(sum[31:16]));
endmodule

module add1 ( input a, input b, input cin,   output sum, output cout );

// Full adder module here
    //assign {cout,sum} = a+b+cin;
    assign sum = a ^ b ^ cin;
    assign cout = a&b | a&cin | b&cin; //全加器進位

endmodule

//Module cseladd (Carry-select adder)
module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);

    wire [15:0] w0, w1;
    wire sel;
    add16 inst1(.a(a[15:0]), .b(b[15:0]), .cin(1'b0), .cout(sel), .sum(sum[15:0]));
    add16 inst2(.a(a[31:16]), .b(b[31:16]), .cin(1'b0), .cout(), .sum(w0));
    add16 inst3(.a(a[31:16]), .b(b[31:16]), .cin(1'b1), .cout(), .sum(w1));
    
    assign sum[31:16] = sel ? w1:w0;

endmodule

//Module addsub
module top_module(
    input [31:0] a,
    input [31:0] b,
    input sub,
    output [31:0] sum
);

    wire w;
    // cin(sub) -> 2's +1
    add16 inst1(.a(a[15:0]), .b(b[15:0]^{32{sub}}), .cin(sub), .cout(w), .sum(sum[15:0]));
    add16 inst2(.a(a[31:16]), .b(b[31:16]^{32{sub}}), .cin(w), .cout(), .sum(sum[31:16]));

endmodule





//

//Clock
module top_module ( );
 reg clk;
    initial clk   = 0;
    always #5 clk = ~clk;
    dut dut1(clk);
endmodule

//Testbench1
module top_module ( output reg A, output reg B );//

    // generate input patterns here
    initial begin
  A = 0; B = 0;
        #10 A = 1; //10
        #5  B = 1; //15
        #5  A = 0; //20
        #20 B = 0; //40
    end

endmodule

//AND gate
module top_module();
    reg [1:0] in;
    wire out;
    
    initial begin
        in = 2'b00;
        #10 in = 2'b01;
        #10 in = 2'b10;
        #10 in = 2'b11;
    end
    
    andgate a1(in,out);
endmodule

//Testbench2
module top_module();
 reg clk, in;
    reg [2:0] s;
    wire out;
    
    //clock
    initial clk = 0;
    always #5 clk = ~clk;
    
    //in
    initial begin
        in = 0;
        #20 in = 1; //20
        #10 in = 0; //30
        #10 in = 1; //40
        #30 in = 0; //70
    end
    
    //s
    initial begin
        s = 3'd2;
        #10 s = 3'd6; //10
        #10 s = 3'd2; //20
        #10 s = 3'd7; //30
        #10 s = 3'd0; //40
    end
    
    q7 q(clk, in, s, out);
endmodule

//T flip-flop
module top_module ();
 reg clk,rst,t;
    wire q;
    
    //clock
    initial clk = 0;
    always #5 clk = ~clk;
    
    //reset
    initial begin
        rst = 1;
        #10 rst = 0;
    end
    
    //Toggle
    initial begin
        t = 0;
        #10 t = 1;
    end
    
    tff tff1(clk, rst, t, q);
endmodule

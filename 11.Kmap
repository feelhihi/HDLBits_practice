//3-variable
module top_module(
    input a,
    input b,
    input c,
    output out  ); 

    assign out = a|b|c;

endmodule

//4-variable
module top_module(
    input a,
    input b,
    input c,
    input d,
    output out  ); 

    assign out = (~a&~d)|(~a&b&c)|(a&c&d)|(~b&~c);

endmodule

//4-variable don't care
module top_module(
    input a,
    input b,
    input c,
    input d,
    output out  ); 
    assign out = (a)|(~b&c);

endmodule

//4-variable xor
module top_module(
    input a,
    input b,
    input c,
    input d,
    output out  ); 

    assign out = 
        (~a & b & ~c & ~d)| 
        (a & ~b & ~c & ~d)|
        (~a & ~b & ~c & d)|
        (a & b & ~c & d)| 
        (~a & b & c & d)|
        (a & ~b & c & d)|
        (~a & ~b & c & ~d)|
        (a & b & c & ~d);

endmodule

//4-variable xor method 2
module top_module(
    input a,
    input b,
    input c,
    input d,
    output out  ); 

    assign out = a^b^c^d;

endmodule

//Minimum SOP and POS
module top_module (
    input a,
    input b,
    input c,
    input d,
    output out_sop,
    output out_pos
); 

    // 先製作 k-map
    assign out_sop = (c&d)|(~a&~b&c); //找1
    assign out_pos = ~( (~c|~d)&(a|b|~c) ); // 直接從 out_sop 轉 > 找1後反轉

endmodule

//K map
module top_module (
    input [4:1] x, 
    output f );

    assign f = (~x[1]&x[3])|(x[2]&x[4]);

endmodule

//K map 2
module top_module (
    input [4:1] x,
    output f
); 
    
    assign f = (~x[1]&x[3])|(~x[2]&~x[4])|(x[2]&x[3]&x[4]); //角落合併

endmodule


//K-map implemented with a multiplexer
module top_module (
    input c,
    input d,
    output [3:0] mux_in
); 

    assign mux_in[0] = c|d;
    assign mux_in[1] = 1'b0;
    assign mux_in[3] = c&d; //k-map 順序不同
    assign mux_in[2] = ~d;

endmodule
